<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        HI5Ql/A6RxOJxX+V/wD/2Q==
</value>
  </data>
</root>